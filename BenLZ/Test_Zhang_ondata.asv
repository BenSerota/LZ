% Zhang Test on our actual data

clear
clc
start_ben
global conds subconds data_paths out_paths WS_path s e N
DOC_basic

%% setting parameters:
Zthresh = 2;
s = 4;  % # of subjects to check per cond
e = 50; % # of epochs to check
N = numel(conds);
%% go

C_all_conds = allcondsLZC(conds,subconds,Zthresh);
cd('E:\Dropbox\Ben Serota\momentary\WS')
SaveUniqueName('LZC_ondata')

%% preparing plot
%C_all_conds to mat
C = cell(1,N);
C_sub = cell(1,s);
C_task = cell(1,numel(subconds));

for i = 1:N
    for j = 1:s
        for l = 1:numel(subconds)          
            tmp = C_all_conds{i}{j}{l};
            tmp = tmp(:);
            C_task{l} = tmp;
        end
        C_sub{j} = cat(1,C_task{1:l});
    end
    C{i} = cat(1,C_sub{1:s});
end

%% plotting
% per condition:
C_fig = figure('name','Complexity grades per cond');
y_ave = nan(1,4);
for i = 1:N
    y = C{i};
    n = numel(y);
    x = repmat(i,n,1);
    y_ave(i) = mean(y); 
    scatter(x,y)
    hold on
end
plot(y)
title('Complexity grades per cond')
ylabel('LZ complexity grade')
xticks(1:4)
xlim([0.5 4.5])
set(gca,'xticklabel',conds)
xlabel('Level of Consciousness')
cd('E:\Dropbox\Ben Serota\momentary\Figs')
savefig(C_fig,['LZC_ondata' date])

%% functions

function [C_all] = allcondsLZC(conds,subconds,Zthresh)
global out_paths N
C_all = cell(1,length(conds));
for i = 1:N                                                      % over conditions
    cd(out_paths{i})                                                        % changes conditions. out_paths becaus out of original script is now this in-path
    C_all{i} = onecondLZC(conds{i},subconds,Zthresh);
end
end

function [C_cond,subconds] = onecondLZC(cond,subconds,Zthresh)
% receives one level-of-consc condition(VS/MC etc.), draws random sbj and
% returns LZC scores of that sbj
global s
tic_cond = tic;
load([cond '_names'],'names');                                                      % loads name list
names = sortn(names);                                                       %#ok<NODEF> % for fun
n = length(names);
names = strrep(names,'.mat','');                                            % drops '.mat' ending
C_cond = cell(1,n);
% s = randi([1 n]);                                                         % draws RANDOM SINGLE subject
% for i = 1:n
for i = 1:s
    %     if ismac
    %         if isequal(date,'31-Jan-2018')
    %             name = names{i};
    %             C_cond{i} = onesbjLZC(name,Zthresh);
    %         end
    %     else
    name = [names{i} '_prep'];
    C_cond{i} = onesbjLZC(name,subconds,Zthresh);
    %     end
end
fprintf('\n overall time per %s condition: %g \n', cond, toc(tic_cond))
end

function [C_sub] = onesbjLZC(name,subconds,Zthresh)
% saves LZC scores across 4 tasks
tic_sub = tic;
load(name)
C_sub = cell(4,1);
for i = 1:numel(subconds)
    data = final.(subconds{i}).data;
    C_sub{i} = onetaskLZC(data,Zthresh);
    clear data
end
clear final
fprintf('\n overall time per %s subject: %g \n', name, toc(tic_sub))
end

function [C_task] = onetaskLZC(data,Zthresh)
% computes LZ Complexity for a single task (3 dim matrix)
global e  % e = instead of n (all) EPOCHS, FOR TEST
data_binary = onetaskLZCprep (data,Zthresh);
n = size(data_binary,3);
if n<e 
    e = n;
end
C_task = nan(1,e); %n !
for i = 1:e %n
    C_task(i) = LZ_C_Zhang(data_binary(:,:,i));
end
end

function [binary] = onetaskLZCprep (data,Zthresh)
% transforms data to binary according to set threshold
data = reshape(data,206,385,[]);
data = abs(zscore(data,0,3));
binary = data>Zthresh;
binary = double(binary);
end

function [] = SaveUniqueName(root_name)
if ~isstring(root_name) && ~ischar(root_name)
    error('input must be of class char or string')
end
cl = fix(clock);
stamp = strrep(mat2str(cl),' ','_');
stamp = strrep(stamp,'[','');
stamp = strrep(stamp,']','');
UniqueName = [root_name '_' stamp];
% if now at home
% if isequal(date,'31-Jan-2018')
%     cd('/Users/admin/Desktop/DACOBO_h/mock')
% end
save (UniqueName)
end



%% plotting
%
% x = 1-reps/s1; %% HERE
% y = C;
% % dSizes = cellfun(@(x) length(x),d);
% % DataCompSizes = cellfun(@(x) length(x),DataComp);
% % y = dSizes./b;
% % y = DataCompSizes./b;
%
% %%
% % x = rel_complx;
% % y = LZ_size;
% figure('name', 'data');
% scatter(x,y,'o')
% hold on
% title('Length of LZ compressed code by Randomness')
% xlabel('Relative Randomeness')
% ylabel('normalised LZ complexity')
%
% %% linear regression
% p = polyfit(x,y,1);
% yfit = polyval(p,x);
% plot(x,yfit,'g')
% hold on
% yres = y - yfit;
% locvar = yres.^2;
% % slope = corrcoef(x,y); % wrong
% r = corrcoef(y,yfit);
% r = round(r(2),2); % (2) cuz diagonal is 1 and this is linear reg.
% center_yfit = (max(yfit)+min(yfit))/2;
% % text(0.6, center_yfit-2,sprintf('slope = %g',slope(2)),'fontsize',14,'color','blue')
% text(0.8, center_yfit,sprintf('r = %g',r),'fontsize',14,'color','green')
%
% %% non-linear regresion
% p2 = polyfit(x,y,2);
% yfit2 = polyval(p2,x);
% plot(x,yfit2,'r*')
% hold on
% yres2 = y - yfit2;
% locvar2 = yres2.^2;
% r2 = corrcoef(y,yfit2);
% r2 = round(r2(2),2); % (2) cuz diagonal is 1
% center_yfit2 = (max(yfit2)+min(yfit2))/2;
% text(0.8, center_yfit2,sprintf('r = %g',r2),'fontsize',14,'color','red')
%
% %% Variance : linear and non-linear
% %plotting deviations (variance?)
% figure('name', 'variance linear reg')
% scatter(x,locvar,'go')
% hold on
% p_var = polyfit(x,locvar,1);
% yfit_var = polyval(p_var,x);
% plot(x,yfit_var,'g-')
% title('Variance by Randomness : linear and non linear regression')
% xlabel('Relative Randomeness')
% ylabel('Variance of normalized LZ complexity grades')
% r_var = corrcoef(yfit_var,locvar);
% r_var = round(r_var(2),2); % (2) cuz diagonal is 1 and this is linear reg.
% loc_yfit_var = 1.75*max(yfit_var);
% text(0.3, loc_yfit_var ,sprintf('r = %g',r_var),'fontsize',14,'color','green')
%
% %% Variance non linear
% %plotting deviations (variance?)
% % figure('name', 'variance non linear reg')
% scatter(x,locvar2,'ro')
% p2_var = polyfit(x,locvar2,2);
% yfit2_var = polyval(p2_var,x);
% plot(x,yfit2_var,'r*')
% % title('Variance by Randomness : NON linear reg')
% xlabel('Relative Randomeness')
% ylabel('Variance of normalized LZ complexity grades')
% r2_var = corrcoef(yfit2_var,locvar2);
% r2_var = round(r2_var(2),2); % (2) cuz diagonal is 1 and this is linear reg.
% loc_yfit2_var = 1.75*max(yfit2_var);
% text(0.3, loc_yfit2_var,sprintf('r = %g',r2_var),'fontsize',14,'color','red')
%
% legend ('linear deviations','linear reg','non-linear deviations','non-linear reg')
%
% tilefigs



